# THROUGH AKKA

For TESTING

AKKA provides us behavior test kit. A special library that lest us simulate the actor system

in a way that allows to instantiate a single actor and more importantly this is going to be synchronous testing.

To test createReceive method

import akka.actor.testkit.typed.CapturedLogEvent;
import akka.actor.testkit.typed.javadsl.BehaviorTestKit;
import blockchain.WorkerBehavior;
import model.Block;
import org.junit.jupiter.api.Test;
import org.slf4j.event.Level;
import utils.BlocksData;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class MiningTest {

    @Test
    void testMiningFails(){
        BehaviorTestKit<WorkerBehavior.Command>testActor = BehaviorTestKit.create(WorkerBehavior.create());
        Block block = BlocksData.getNextBlock(0,"0");
        WorkerBehavior.Command message = new WorkerBehavior.Command(block,0,5);
        testActor.run(message); // not tell method
        List<CapturedLogEvent> logMessages = testActor.getAllLogEntries();
        assertEquals(logMessages.size(),1);
        assertEquals(logMessages.get(0).message(),"null");
        assertEquals((logMessages.get(0).level()), Level.DEBUG);
    }
}

Meaning we can use the log messages to test that code is producing the expected results

How to test behavior

we expected that HashResult calculated by WorkerBehavior to return to controller that we have not written yet. The child actor need to know where to send the message to.

Actor test kit

Create stub of an actor that can accept message of required type that something that actor test kit let us do. The stub actor is not so much an actor but the stub of actor queue and the object type is called a test inbox.

```java
TestInbox<HashResult> testInbox = TestInbox.create(); // it is an stub of an actor that can receive message of Type HashResult
WorkerBehavior.Command message = new WorkerBehavior.Command(block,0,5,testInbox.getRef());
```

to get ActorRef use 

```java
use .getRef() method
then we can compare with help of expectedMessage
```
